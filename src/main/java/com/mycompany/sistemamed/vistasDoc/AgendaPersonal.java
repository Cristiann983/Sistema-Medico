/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */

package com.mycompany.sistemamed.vistasDoc;
import com.itextpdf.text.*;
import com.itextpdf.text.pdf.PdfPCell;
import com.itextpdf.text.pdf.PdfPTable;
import com.itextpdf.text.pdf.PdfWriter;
import java.io.FileOutputStream;
import javax.mail.*;
import javax.mail.internet.*;
import java.util.Properties;
import com.mycompany.sistemamed.inter.CitasInter;
import com.mycompany.sistemamed.modelos.Citas;
import com.mycompany.sistemamed.vistasAdmin.CitasImpl;
import java.awt.Color;
import java.awt.Desktop;
import java.io.File;
import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.StandardCopyOption;
import java.util.List;
import javax.swing.JOptionPane;
import javax.swing.JScrollPane;
import javax.swing.JTable;
import javax.swing.JTextArea;
import javax.swing.table.DefaultTableModel;



/**
 *
 * @author crist
 */
public class AgendaPersonal extends javax.swing.JPanel {

    /**
     * Creates new form num1
     */
    public AgendaPersonal() {
        initComponents();
        styles();
        cargarAgenda();
    }
    
    private void cargarAgenda(){
        //Cargar los usuarios en la tabla
        try{
               CitasInter cita=new CitasImpl();
               DefaultTableModel model= (DefaultTableModel)Calendario.getModel();
            
               // List<Citas> lista=cita.listar();
               cita.listar().forEach((u) ->   
                 model.addRow(new Object[]{u.getFecha(),u.getHora(),u.getPaciente(),u.getMotivo(),u.getEstado()}));
        }catch(Exception e){
                System.out.println(e.getMessage());
        }
   
      
    }
    
    private void styles(){
       title.putClientProperty( "FlatLaf.style", "font: bold $h1.regular.font" );
        title.setForeground(Color.black);
    }
    
     

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        contenido = new javax.swing.JPanel();
        calendario = new javax.swing.JScrollPane();
        Calendario = new javax.swing.JTable();
        jButton1 = new javax.swing.JButton();
        title = new javax.swing.JLabel();
        btnReceta = new javax.swing.JButton();

        contenido.setBackground(new java.awt.Color(255, 255, 255));

        Calendario.setFont(new java.awt.Font("Segoe UI Symbol", 1, 12)); // NOI18N
        Calendario.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Fecha", "Hora", "Paciente", "Motivo", "Estado"
            }
        ));
        Calendario.setCellSelectionEnabled(true);
        Calendario.setName(""); // NOI18N
        Calendario.setShowGrid(true);
        calendario.setViewportView(Calendario);
        Calendario.getColumnModel().getSelectionModel().setSelectionMode(javax.swing.ListSelectionModel.SINGLE_INTERVAL_SELECTION);

        jButton1.setText("Confirmar");

        title.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        title.setText("Calendario de citas");
        title.setToolTipText("");

        btnReceta.setText("Generar receta");
        btnReceta.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRecetaActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout contenidoLayout = new javax.swing.GroupLayout(contenido);
        contenido.setLayout(contenidoLayout);
        contenidoLayout.setHorizontalGroup(
            contenidoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, contenidoLayout.createSequentialGroup()
                .addGroup(contenidoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(contenidoLayout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(btnReceta)
                        .addGap(18, 18, 18)
                        .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 107, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(contenidoLayout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(title, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(contenidoLayout.createSequentialGroup()
                        .addGap(54, 54, 54)
                        .addComponent(calendario, javax.swing.GroupLayout.DEFAULT_SIZE, 548, Short.MAX_VALUE)))
                .addGap(60, 60, 60))
        );
        contenidoLayout.setVerticalGroup(
            contenidoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(contenidoLayout.createSequentialGroup()
                .addGap(40, 40, 40)
                .addComponent(title)
                .addGap(20, 20, 20)
                .addComponent(calendario, javax.swing.GroupLayout.DEFAULT_SIZE, 185, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(contenidoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton1)
                    .addComponent(btnReceta))
                .addGap(109, 109, 109))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(contenido, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(contenido, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents

    private void btnRecetaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRecetaActionPerformed
      // TODO add your handling code here:
    int filaSeleccionada = Calendario.getSelectedRow();
    if (filaSeleccionada != -1) {
        DefaultTableModel model = (DefaultTableModel) Calendario.getModel();

        // Obtener datos de la tabla
        String nombrePaciente = model.getValueAt(filaSeleccionada, 2).toString();
        String fecha = model.getValueAt(filaSeleccionada, 0).toString();
        String motivo = model.getValueAt(filaSeleccionada, 3).toString();
        String correoPaciente = "cristianplacido78@gmail.com"; // Reemplaza con el correo desde tu modelo

        // Crear el JTextArea para ingresar medicamentos
        JTextArea textArea = new JTextArea(10, 30);  // 10 filas, 30 columnas
        textArea.setLineWrap(true);  // Para que el texto se ajuste a la línea
        textArea.setWrapStyleWord(true);  // Para que las palabras largas se ajusten también

        // Mostrar el cuadro de diálogo para ingresar medicamentos
        JScrollPane scrollPane = new JScrollPane(textArea);
        int option = JOptionPane.showConfirmDialog(
                this, 
                scrollPane, 
                "Escribe los medicamentos separados por saltos de línea", 
                JOptionPane.OK_CANCEL_OPTION, 
                JOptionPane.PLAIN_MESSAGE
        );

        // Verificar si el usuario presionó "OK"
        if (option == JOptionPane.OK_OPTION) {
            String medicamentosTexto = textArea.getText().trim();

            if (!medicamentosTexto.isEmpty()) {
                // Dividir los medicamentos por líneas
                List<String> medicamentos = List.of(medicamentosTexto.split("\n"));

                // Generar PDF
                String filePath = generarRecetaPDF(nombrePaciente, motivo, fecha, medicamentos);
                if (filePath != null) {
                    // Preguntar si desea enviar el correo
                    int respuesta = JOptionPane.showConfirmDialog(
                            
                            this,
                            "¿Deseas enviar la receta médica por correo?",
                            "Enviar por Correo",
                            JOptionPane.YES_NO_OPTION,
                            JOptionPane.QUESTION_MESSAGE
                    );

                    // Si el usuario elige "Sí", enviar el correo
                    if (respuesta == JOptionPane.YES_OPTION) {
                        enviarCorreoConAdjunto(correoPaciente, "Receta Médica", "Adjunto encontrarás tu receta médica.", filePath);
                        JOptionPane.showMessageDialog(this, "La receta se ha enviado por correo.", "Éxito", JOptionPane.INFORMATION_MESSAGE);
                    } else {
                        JOptionPane.showMessageDialog(this, "La receta fue generada pero no se enviará por correo.", "Receta Generada", JOptionPane.INFORMATION_MESSAGE);
                    }

                    // Verificar y crear la carpeta de destino si no existe
                    File directorioDestino = new File("C:\\descargas");
                    if (!directorioDestino.exists()) {
                        boolean carpetaCreada = directorioDestino.mkdirs();  // Crear la carpeta si no existe
                        if (carpetaCreada) {
                            System.out.println("Carpeta 'descargas' creada.");
                        } else {
                            System.out.println("No se pudo crear la carpeta 'descargas'.");
                        }
                    }

                    // Guardar el archivo en la carpeta especificada
                    try {
                        Path destinationPath = Path.of("C:\\descargas", "receta_" + nombrePaciente.replace(" ", "_") + ".pdf");
                        Files.copy(Path.of(filePath), destinationPath, StandardCopyOption.REPLACE_EXISTING);
                        System.out.println("Receta guardada en: " + destinationPath.toString());
                    } catch (IOException e) {
                        e.printStackTrace();
                        JOptionPane.showMessageDialog(this, "Error al guardar la receta en el sistema.", "Error de Guardado", JOptionPane.ERROR_MESSAGE);
                    }

                    // Abrir el PDF en el navegador
                    try {
                        File pdfFile = new File(filePath);
                        if (pdfFile.exists()) {
                            Desktop.getDesktop().browse(pdfFile.toURI()); // Abre el archivo en el navegador predeterminado
                        }
                    } catch (IOException e) {
                        e.printStackTrace();
                        JOptionPane.showMessageDialog(this, "No se pudo abrir la receta en el navegador.", "Error", JOptionPane.ERROR_MESSAGE);
                    }
                }
            } else {
                JOptionPane.showMessageDialog(this, 
                        "No se ingresaron medicamentos.", 
                        "Advertencia", 
                        JOptionPane.WARNING_MESSAGE);
            }
        }
    } else {
        System.out.println("Por favor, selecciona una fila.");
    }
    }//GEN-LAST:event_btnRecetaActionPerformed
   private String generarRecetaPDF(String nombrePaciente, String motivo, String fecha, List<String> medicamentos) {
    String filePath = "receta_" + nombrePaciente.replace(" ", "_") + ".pdf";
    try {
        Document document = new Document(PageSize.A4);
        PdfWriter writer = PdfWriter.getInstance(document, new FileOutputStream(filePath));
        document.open();

        // Establecer fuentes
        Font boldFont = new Font(Font.FontFamily.HELVETICA, 12, Font.BOLD);
        Font normalFont = new Font(Font.FontFamily.HELVETICA, 12, Font.NORMAL);

        // Encabezado con el nombre de la clínica
        Paragraph header = new Paragraph("CLÍNICA MEDESK", boldFont);
        header.setAlignment(Element.ALIGN_CENTER);
        document.add(header);

        // Espacio debajo del encabezado
        document.add(new Paragraph("\n"));

        // Información del paciente en un cuadro
        PdfPTable pacienteTable = new PdfPTable(2);
        pacienteTable.setWidthPercentage(100);
        pacienteTable.setSpacingBefore(10f);
        pacienteTable.setSpacingAfter(10f);

        // Estilo de las celdas
        PdfPCell cell;

        // Primera fila
        cell = new PdfPCell(new Phrase("FECHA: " + fecha, normalFont));
        cell.setBorder(Rectangle.BOX);
        pacienteTable.addCell(cell);

        cell = new PdfPCell(new Phrase("MUNICIPIO: Villa de Etla Oaxaca", normalFont));
        cell.setBorder(Rectangle.BOX);
        pacienteTable.addCell(cell);

        // Segunda fila
        cell = new PdfPCell(new Phrase("NOMBRE: " + nombrePaciente, normalFont));
        cell.setBorder(Rectangle.BOX);
        pacienteTable.addCell(cell);

        cell = new PdfPCell(new Phrase("CC: 123456789", normalFont));
        cell.setBorder(Rectangle.BOX);
        pacienteTable.addCell(cell);

        document.add(pacienteTable);

        // Diagnóstico
        Paragraph diagnostico = new Paragraph("CIE-10: R10.3 " + motivo, boldFont);
        diagnostico.setSpacingAfter(10f);
        document.add(diagnostico);

        // Tabla para los medicamentos (cuadro separado)
        PdfPTable medicamentoTable = new PdfPTable(1);
        medicamentoTable.setWidthPercentage(100);
        medicamentoTable.setSpacingBefore(10f);

        // Título de la sección
        PdfPCell medicamentoHeader = new PdfPCell(new Phrase("Receta Médica", boldFont));
        medicamentoHeader.setHorizontalAlignment(Element.ALIGN_CENTER);
        medicamentoHeader.setBackgroundColor(BaseColor.LIGHT_GRAY);
        medicamentoHeader.setPadding(5f);
        medicamentoTable.addCell(medicamentoHeader);

        // Lista de medicamentos
        for (String medicamento : medicamentos) {
            PdfPCell medicamentoCell = new PdfPCell(new Phrase(medicamento, normalFont));
            medicamentoCell.setPadding(5f);
            medicamentoCell.setBorder(Rectangle.BOX);
            medicamentoTable.addCell(medicamentoCell);
        }

        document.add(medicamentoTable);

        // Espacio adicional
        document.add(new Paragraph("\n"));

        // Firma del médico
        Paragraph firma = new Paragraph("FIRMA MÉDICO", boldFont);
        firma.setAlignment(Element.ALIGN_RIGHT);
        document.add(firma);

        // Cerrar el documento
        document.close();

        return filePath;
    } catch (Exception e) {
        e.printStackTrace();
    }
    return null;
}


private void enviarCorreoConAdjunto(String destinatario, String asunto, String cuerpo, String filePath) {
    final String remitente = "cristiangerardo0707@gmail.com";
    final String password = "wydn zjmz svkg ypkp";

    // Configuración del servidor SMTP de Gmail
    Properties props = new Properties();
    props.put("mail.smtp.host", "smtp.gmail.com");
    props.put("mail.smtp.port", "587");
    props.put("mail.smtp.auth", "true");
    props.put("mail.smtp.starttls.enable", "true");

    Session session = Session.getInstance(props, new Authenticator() {
        protected PasswordAuthentication getPasswordAuthentication() {
            return new PasswordAuthentication(remitente, password);
        }
    });

    try {
        Message message = new MimeMessage(session);
        message.setFrom(new InternetAddress(remitente));
        message.setRecipients(Message.RecipientType.TO, InternetAddress.parse(destinatario));
        message.setSubject(asunto);

        // Parte del mensaje
        MimeBodyPart messageBodyPart = new MimeBodyPart();
        messageBodyPart.setText(cuerpo);

        // Archivo adjunto
        MimeBodyPart attachPart = new MimeBodyPart();
        attachPart.attachFile(filePath);

        Multipart multipart = new MimeMultipart();
        multipart.addBodyPart(messageBodyPart);
        multipart.addBodyPart(attachPart);

        message.setContent(multipart);

        Transport.send(message);
        System.out.println("Correo enviado exitosamente.");
    } catch (Exception e) {
        e.printStackTrace();
    }
}

    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTable Calendario;
    private javax.swing.JButton btnReceta;
    private javax.swing.JScrollPane calendario;
    private javax.swing.JPanel contenido;
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel title;
    // End of variables declaration//GEN-END:variables
}
